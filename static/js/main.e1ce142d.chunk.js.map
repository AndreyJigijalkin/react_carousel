{"version":3,"sources":["components/Carousel.tsx","components/Label.tsx","App.tsx","index.tsx"],"names":["Carousel","state","gap","translation","handleButton","event","props","itemWidth","step","frameSize","infinite","images","buttonType","currentTarget","dataset","goPrev","goNext","maxWidth","length","setState","this","transitionDuration","className","type","onClick","disabled","style","width","map","image","index","transform","src","alt","React","Component","LabelInput","labelName","value","name","onChange","min","max","smileImages","App","animationDuration","handleInfinity","changeInput","target","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1ce142d.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  transitionDuration: number;\n  step: number;\n  infinite: boolean;\n};\n\ntype State = {\n  gap: number;\n  translation: number;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    gap: 10,\n    translation: 0,\n  };\n\n  handleButton = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      translation,\n      gap,\n    } = this.state;\n    const {\n      itemWidth,\n      step,\n      frameSize,\n      infinite,\n      images,\n    } = this.props;\n    const { buttonType } = event.currentTarget.dataset;\n    let goPrev = translation + ((itemWidth + gap) * step);\n    let goNext = translation - ((itemWidth + gap) * step);\n    const maxWidth = (images.length - frameSize) * (itemWidth + gap);\n\n    if (goNext - frameSize * step < -maxWidth) {\n      goNext = -maxWidth;\n    }\n\n    if (goPrev - frameSize * step >= 0) {\n      goPrev = 0;\n    }\n\n    if (buttonType === 'next') {\n      this.setState(\n        { translation: goNext },\n      );\n\n      if (translation === -maxWidth && infinite) {\n        this.setState(\n          { translation: 0 },\n        );\n      }\n    }\n\n    if (buttonType === 'prev') {\n      this.setState(\n        { translation: goPrev },\n      );\n\n      if (translation === 0 && infinite) {\n        this.setState(\n          { translation: -maxWidth },\n        );\n      }\n    }\n  };\n\n  render() {\n    const {\n      itemWidth,\n      images,\n      frameSize,\n      transitionDuration,\n      infinite,\n    } = this.props;\n\n    const {\n      gap,\n      translation,\n    } = this.state;\n\n    const maxWidth = (images.length - frameSize) * (itemWidth + gap);\n\n    return (\n      (\n        <div className=\"Carousel\">\n\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            data-button-type=\"prev\"\n            data-cy=\"prev\"\n            onClick={this.handleButton}\n            disabled={!infinite && translation === 0}\n          >\n            «\n          </button>\n\n          <ul\n            className=\"Carousel__list\"\n            style={{ width: `${(itemWidth + gap) * frameSize}px` }}\n          >\n            {images.map((image, index) => (\n              <li\n                key={image}\n                className=\"Carousel__image\"\n                style={{\n                  transform: `translateX(${translation}px)`,\n                  transitionDuration: `${transitionDuration}ms`,\n                }}\n              >\n                <img\n                  src={image}\n                  alt={`${index}`}\n                  style={{ width: `${itemWidth}px` }}\n                />\n              </li>\n            ))}\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            data-button-type=\"next\"\n            data-cy=\"next\"\n            onClick={this.handleButton}\n            disabled={!infinite && translation === -maxWidth}\n          >\n            »\n          </button>\n        </div>\n      )\n    );\n  }\n}\n","import React from 'react';\n\ntype Props = {\n  labelName: string;\n  name: string;\n  value: string | number;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  min: number;\n  max: number;\n};\n\nexport const LabelInput: React.FC<Props> = ({\n  labelName,\n  value,\n  name,\n  onChange,\n  min,\n  max,\n}) => {\n  return (\n    <label>\n      {labelName}\n      <input\n        type=\"number\"\n        name={name}\n        value={value}\n        onChange={onChange}\n        min={min}\n        max={max}\n      />\n    </label>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\nimport { LabelInput } from './components/Label';\n\ninterface State {\n  images?: string[];\n  itemWidth?: number;\n  step?: number;\n  frameSize?: number;\n  animationDuration?: number;\n  infinite?: boolean;\n}\n\nconst smileImages = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: smileImages,\n    itemWidth: 130,\n    step: 3,\n    frameSize: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleInfinity = () => {\n    const { infinite } = this.state;\n\n    this.setState({ infinite: !infinite });\n  };\n\n  changeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      name, value, type, checked,\n    } = event.target;\n\n    this.setState({\n      [name]: type === 'checkbox'\n        ? checked\n        : +value,\n    });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      step,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n\n        <Carousel\n          images={images}\n          itemWidth={itemWidth}\n          frameSize={frameSize}\n          transitionDuration={animationDuration}\n          step={step}\n          infinite={infinite}\n        />\n\n        <LabelInput\n          labelName=\"Item Width: \"\n          value={itemWidth}\n          onChange={this.changeInput}\n          min={100}\n          max={300}\n          name=\"itemWidth\"\n        />\n\n        <LabelInput\n          labelName=\"Frame Size: \"\n          value={frameSize}\n          onChange={this.changeInput}\n          min={0}\n          max={10}\n          name=\"frameSize\"\n        />\n\n        <LabelInput\n          labelName=\"Carousel step: \"\n          value={step}\n          onChange={this.changeInput}\n          min={0}\n          max={10}\n          name=\"step\"\n        />\n\n        <LabelInput\n          labelName=\"Animation duration\"\n          value={animationDuration}\n          onChange={this.changeInput}\n          min={0}\n          max={5000}\n          name=\"animationDuration\"\n        />\n\n        <label>\n          {'Infinite? '}\n\n          <input\n            type=\"checkbox\"\n            checked={infinite}\n            onClick={this.handleInfinity}\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}